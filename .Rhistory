"home_isolation",
"hospitalized_total",
"hospitalized_with_symptoms",
"hospitalized_intensive_care_all",
"hospitalized_intensive_care_new",
"hospitalized_recovered",
"deaths",
"tests",
"tests_n_tested",
"test_molec_n_tests",
"test_quick_n_tests",
"notes",
"tests_notes",
"cases_notes",
"test_molec_positives",
"test_quick_positives",
"nuts_code_1",
"nuts_code_2",
"region_inhabitants",
"region_surface",
"region_pop_density",
"region_n_municipalities",
"region_n_provinces"
)
colname_map_df_reorder <-
colname_map_df[match(correct_order, colname_map_df$newnames), ]
covid_data_raw_with_regions <-
tibble(covid_data_raw_with_regions)[, colname_map_df_reorder$oldnames]
colnames(covid_data_raw_with_regions) <-
colname_map_df_reorder$newnames
covid_data_raw_with_regions <-
select(covid_data_raw_with_regions,-country)
tmp_list <-
split(covid_data_raw_with_regions, f = covid_data_raw_with_regions$region)
tmp_list_deaths_new <-
lapply(tmp_list, function(x)
base::transform(x, deaths_new = c(0, diff(deaths))))
covid_data_deaths_new <- do.call(rbind, tmp_list_deaths_new) %>%
mutate(year = factor(lubridate::year(date))) %>%
mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) %>%
mutate(day = factor(lubridate::day(date)))
tmp_date_day_map <-
data.frame(
date = unique(covid_data_deaths_new$date),
day_since_pandemic_began = 1:length(unique(covid_data_deaths_new$date))
) %>%
mutate(week_since_pandemic_began = bin_integer_into_integer(day_since_pandemic_began, multiples = 7))
covid_data_deaths_new <-
merge(covid_data_deaths_new,
tmp_date_day_map,
by = "date",
sort = FALSE)
correct_order_2 <-
c(
"date",
"year",
"month",
"day",
"day_since_pandemic_began",
"week_since_pandemic_began",
"region",
"region_code",
"lat",
"long",
"cases_total",
"cases_suspected_by_diagnosis",
"cases_from_screening",
"positives_tot",
"positive_tot_variation",
"positives_new",
"home_isolation",
"hospitalized_total",
"hospitalized_with_symptoms",
"hospitalized_intensive_care_all",
"hospitalized_intensive_care_new",
"hospitalized_recovered",
"deaths",
"deaths_new",
"tests",
"tests_n_tested",
"test_molec_n_tests",
"test_quick_n_tests",
"notes",
"tests_notes",
"cases_notes",
"test_molec_positives",
"test_quick_positives",
"nuts_code_1",
"nuts_code_2",
"region_inhabitants",
"region_surface",
"region_pop_density",
"region_n_municipalities",
"region_n_provinces"
)
covid_data_clean <- covid_data_deaths_new[, correct_order_2]
rownames(covid_data_clean) <- NULL
rm(
correct_order,
colname_map_df,
colname_map_df_reorder,
covid_data_raw,
region_demographics,
covid_data_deaths_new,
covid_data_raw_with_regions
)
write.csv(
covid_data_clean,
"data/epidemiology/italy/regions/covid_REGIONS_data_clean.csv"
)
cat("Region file saved in the following location:\n")
cat(
"/home/ubiminor/Dropbox/COVID data analysis/data/epidemiology/covid_data_regions/covid_REGIONS_data_clean.csv"
)
# wrangle region data
source("data/epidemiology/italy/regions/wrangle region data.R")
# downoad Our World In Data newest dataset
tryCatch(expr = source("data/epidemiology/world/download_OWID_dataset.R"),
error = function(err) download.file(url = "https://covid.ourworldindata.org/data/owid-covid-data.csv", destfile = paste0("data/epidemiology/world/OWID_huge_table_latest.", Sys.Date(), ".csv")))
# download italy regional and whole data
source("data/epidemiology/italy/download newest data.R")
# wrangle italy data
source("data/epidemiology/italy/italy_whole/wrangle italy data.R")
latest_date_italy.country_dataset <- read.csv("data/epidemiology/italy/italy_whole/covid_ITALY_data_clean.csv") %>%
rename(giorno_da_inizio_pandemia = X) %>%
.$data %>% as.Date() %>% sort() %>% unique() %>% tail(1)
# wrangle region data
source("data/epidemiology/italy/regions/wrangle region data.R")
latest_date_italy.regions_dataset <- read.csv("data/epidemiology/italy/regions/covid_REGIONS_data_clean.csv", row.names = 1) %>%
mutate(date = as.Date(date)) %>%
.$date %>% sort() %>% unique() %>% tail(1)
# wrangle region data
source("data/epidemiology/italy/regions/wrangle region data.R")
# wrangle region data
source("data/epidemiology/italy/regions/wrangle region data.R")
library(tidyverse)
source("../personal_R_functions/my_personal_functions.R")
######## WRANGLE REGION DATA ############
# load raw data
covid_data_raw <-
list.files(pattern = "*.csv",
path = "data/epidemiology/italy/regions/raw_data/",
full.names = TRUE) %>%
map_df( ~ data.table::fread(.)) %>%
mutate(data = as.Date(data))
colnames(covid_data_raw)[4] <- "Regione"
# load region demographics data
region_demographics <-
readxl::read_xlsx(
"data/epidemiology/italy/regions/raw_data/region_demographics/abitanti per regione_inizio_2020.xlsx"
)
### merge the two ###
covid_data_raw_with_regions <-
merge(
covid_data_raw,
region_demographics,
all.x = TRUE,
by = "Regione",
sort = FALSE
)
colname_map_df <-
data.frame(
oldnames = colnames(covid_data_raw_with_regions),
newnames = c(
"region",
"date",
"country",
"region_code",
"lat",
"long",
"hospitalized_with_symptoms",
"hospitalized_intensive_care_all",
"hospitalized_total",
"home_isolation",
"positives_tot",
"positive_tot_variation",
"positives_new",
"hospitalized_recovered",
"deaths",
"cases_suspected_by_diagnosis",
"cases_from_screening",
"cases_total",
"tests",
"tests_n_tested",
"notes",
"hospitalized_intensive_care_new",
"tests_notes",
"cases_notes",
"test_molec_positives",
"test_quick_positives",
"test_molec_n_tests",
"test_quick_n_tests",
"nuts_code_1",
"nuts_code_2",
"region_inhabitants",
"region_surface",
"region_pop_density",
"region_n_municipalities",
"region_n_provinces"
)
)
correct_order <-
c(
"country",
"date",
"region",
"region_code",
"lat",
"long",
"cases_total",
"cases_suspected_by_diagnosis",
"cases_from_screening",
"positives_tot",
"positive_tot_variation",
"positives_new",
"home_isolation",
"hospitalized_total",
"hospitalized_with_symptoms",
"hospitalized_intensive_care_all",
"hospitalized_intensive_care_new",
"hospitalized_recovered",
"deaths",
"tests",
"tests_n_tested",
"test_molec_n_tests",
"test_quick_n_tests",
"notes",
"tests_notes",
"cases_notes",
"test_molec_positives",
"test_quick_positives",
"nuts_code_1",
"nuts_code_2",
"region_inhabitants",
"region_surface",
"region_pop_density",
"region_n_municipalities",
"region_n_provinces"
)
colname_map_df_reorder <-
colname_map_df[match(correct_order, colname_map_df$newnames), ]
covid_data_raw_with_regions <-
tibble(covid_data_raw_with_regions)[, colname_map_df_reorder$oldnames]
colnames(covid_data_raw_with_regions) <-
colname_map_df_reorder$newnames
covid_data_raw_with_regions <-
select(covid_data_raw_with_regions,-country)
tmp_list <-
split(covid_data_raw_with_regions, f = covid_data_raw_with_regions$region)
tmp_list_deaths_new <-
lapply(tmp_list, function(x)
base::transform(x, deaths_new = c(0, diff(deaths))))
covid_data_deaths_new <- do.call(rbind, tmp_list_deaths_new) %>%
mutate(year = factor(lubridate::year(date))) %>%
mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) %>%
mutate(day = factor(lubridate::day(date)))
tmp_date_day_map <-
data.frame(
date = unique(covid_data_deaths_new$date),
day_since_pandemic_began = 1:length(unique(covid_data_deaths_new$date))
) %>%
mutate(week_since_pandemic_began = bin_integer_into_integer(day_since_pandemic_began, multiples = 7))
covid_data_deaths_new <-
merge(covid_data_deaths_new,
tmp_date_day_map,
by = "date",
sort = FALSE)
correct_order_2 <-
c(
"date",
"year",
"month",
"day",
"day_since_pandemic_began",
"week_since_pandemic_began",
"region",
"region_code",
"lat",
"long",
"cases_total",
"cases_suspected_by_diagnosis",
"cases_from_screening",
"positives_tot",
"positive_tot_variation",
"positives_new",
"home_isolation",
"hospitalized_total",
"hospitalized_with_symptoms",
"hospitalized_intensive_care_all",
"hospitalized_intensive_care_new",
"hospitalized_recovered",
"deaths",
"deaths_new",
"tests",
"tests_n_tested",
"test_molec_n_tests",
"test_quick_n_tests",
"notes",
"tests_notes",
"cases_notes",
"test_molec_positives",
"test_quick_positives",
"nuts_code_1",
"nuts_code_2",
"region_inhabitants",
"region_surface",
"region_pop_density",
"region_n_municipalities",
"region_n_provinces"
)
covid_data_clean <- covid_data_deaths_new[, correct_order_2]
rownames(covid_data_clean) <- NULL
rm(
correct_order,
colname_map_df,
colname_map_df_reorder,
covid_data_raw,
region_demographics,
covid_data_deaths_new,
covid_data_raw_with_regions
)
write.csv(
covid_data_clean,
"data/epidemiology/italy/regions/covid_REGIONS_data_clean.csv"
)
cat("Region file saved in the following location:\n")
cat(
"/home/ubiminor/Dropbox/COVID data analysis/data/epidemiology/covid_data_regions/covid_REGIONS_data_clean.csv"
)
latest_date_italy.regions_dataset <- read.csv("data/epidemiology/italy/regions/covid_REGIONS_data_clean.csv", row.names = 1) %>%
mutate(date = as.Date(date)) %>%
.$date %>% sort() %>% unique() %>% tail(1)
# wrangle region data
source("data/epidemiology/italy/regions/wrangle region data.R")
# wrangle italy data
source("data/epidemiology/italy/italy_whole/wrangle italy data.R")
######## WRANGLE REGION DATA ############
# load raw data
covid_data_raw <-
list.files(pattern = "*.csv",
path = "data/epidemiology/italy/regions/raw_data/",
full.names = TRUE) %>%
map_df( ~ data.table::fread(.)) %>%
mutate(data = as.Date(data))
# wrangle italy data
source("data/epidemiology/italy/italy_whole/wrangle italy data.R")
# wrangle region data
source("data/epidemiology/italy/regions/wrangle region data.R")
latest_date_italy.regions_dataset <- read.csv("data/epidemiology/italy/regions/covid_REGIONS_data_clean.csv", row.names = 1) %>%
mutate(date = as.Date(date)) %>%
.$date %>% sort() %>% unique() %>% tail(1)
covid_epidemiology_international <- readr::read_csv(file = list.files(path = "data/epidemiology/world/",
pattern = ".csv$", full.names = TRUE)) %>%
mutate(date_tmp = as.character(date)) %>%
mutate(date = as.Date(date)) %>%
separate(col = "date_tmp", into = c("year", "month", "day"), sep = "-", remove = FALSE)
latest_date <- max(covid_epidemiology_international$date)
covid_epidemiology_international %>%
filter(date == max(date) & !is.na(continent)) %>% # get only latest date, and the continents in the "location" column need to be removed. this is easy, we can simply remove rows where "location" is NA.
arrange(-new_cases_per_million) %>%
head(50) %>%
#filter(iso_code =="ITA") %>%
select(date, new_cases_per_million, location, continent) %>%
ggplot(aes(y = reorder(location, new_cases_per_million), x = new_cases_per_million, fill = continent)) +
geom_bar(stat = "identity") +
theme_light()+
ggtitle("Tot weekly Cases per million")+
labs(subtitle = paste("Latest date:", latest_date))+
xlab("Weekly cases per million") +
ylab("Country")+
scale_fill_manual(values = ggsci::pal_jco()(6))
latest_date <- max(covid_epidemiology_international$date)
covid_epidemiology_international %>%
filter(date == max(date) & !is.na(continent)) %>% # get only latest date, and the continents in the "location" column need to be removed. this is easy, we can simply remove rows where "location" is NA.
arrange(-new_cases_per_million) %>%
head(50) %>%
#filter(iso_code =="ITA") %>%
select(date, new_cases_per_million, location, continent) %>%
ggplot(aes(y = reorder(location, new_cases_per_million), x = new_cases_per_million, fill = continent)) +
geom_bar(stat = "identity") +
theme_light()+
ggtitle("Tot weekly Cases per million")+
labs(subtitle = paste("Latest date:", latest_date))+
xlab("Weekly cases per million") +
ylab("Country")+
scale_fill_manual(values = ggsci::pal_jco()(6))
covid_epidemiology_international %>%
filter(date == max(date) & !is.na(continent)) %>% # get only latest date, and the continents in the "location" column need to be removed. this is easy, we can simply remove rows where "location" is NA.
arrange(-new_cases_per_million) %>%
head(20) %>%
#filter(iso_code =="ITA") %>%
select(date, new_cases_per_million, location, continent) %>%
ggplot(aes(y = reorder(location, new_cases_per_million), x = new_cases_per_million, fill = continent)) +
geom_bar(stat = "identity") +
theme_light()+
ggtitle("Tot weekly Cases per million")+
labs(subtitle = paste("Latest date:", latest_date))+
xlab("Weekly cases per million") +
ylab("Country")+
scale_fill_manual(values = ggsci::pal_jco()(6))
latest_date <- max(covid_epidemiology_international$date)
covid_epidemiology_international %>%
filter(date == max(date) & !is.na(continent)) %>% # get only latest date, and the continents in the "location" column need to be removed. this is easy, we can simply remove rows where "location" is NA.
arrange(-new_cases_per_million) %>%
head(30) %>%
#filter(iso_code =="ITA") %>%
select(date, new_cases_per_million, location, continent) %>%
ggplot(aes(y = reorder(location, new_cases_per_million), x = new_cases_per_million, fill = continent)) +
geom_bar(stat = "identity") +
theme_light()+
ggtitle("Tot weekly Cases per million")+
labs(subtitle = paste("Latest date:", latest_date))+
xlab("Weekly cases per million") +
ylab("Country")+
scale_fill_manual(values = ggsci::pal_jco()(6))
latest_date <- max(covid_epidemiology_international$date)
tmp <- covid_epidemiology_international %>%
filter(date == max(date) & !is.na(continent)) %>% # get only latest date, and the continents in the "location" column need to be removed. this is easy, we can simply remove rows where "location" is NA.
arrange(-total_cases_per_million) %>%
head(30) %>%
ggplot(aes(y = reorder(location, total_cases_per_million), x = total_cases_per_million, fill = continent)) +
geom_bar(stat = "identity") +
theme_light()+
ggtitle("Tot Cases per million")+
labs(subtitle = paste("Latest date:", latest_date))+
xlab("Tot Cases per million") +
ylab("Country")+
scale_fill_manual("Continent", values = ggsci::pal_jco()(6))
tmp
ggpubr::ggarrange(ggplot(covid_data_italy_whole, aes(data, tamponi_nuovi, colour = giorno_sett))+ geom_line(),
ggplot(covid_data_italy_whole, aes(data, nuovi_positivi, colour = giorno_sett))+ geom_line(),
common.legend = TRUE,
nrow = 2, ncol = 1)
latest_date <- max(covid_epidemiology_international$date)
covid_epidemiology_international %>%
filter(date == max(date) & !is.na(continent)) %>% # get only latest date, and the continents in the "location" column need to be removed. this is easy, we can simply remove rows where "location" is NA.
arrange(-total_deaths_per_million) %>%
head(50) %>%
ggplot(aes(y = reorder(location, total_deaths_per_million), x = total_deaths_per_million, fill = continent)) +
geom_bar(stat = "identity") +
theme_light()+
ggtitle("Deaths per million")+
labs(subtitle = paste("Latest date:", latest_date))+
xlab("Deaths per million") +
ylab("Country")+
scale_fill_manual("Continent", values = ggsci::pal_jco()(6))
ggpubr::ggarrange(ggplot(covid_data_italy_whole, aes(data, tamponi_nuovi, colour = giorno_sett))+ geom_line(),
ggplot(covid_data_italy_whole, aes(data, nuovi_positivi, colour = giorno_sett))+ geom_line(),
common.legend = TRUE,
nrow = 2, ncol = 1)
latest_date_owid_dataset <- sort(unique(covid_epidemiology_international$date), decreasing = TRUE)[1]
covid_epidemiology_international %>% filter(date == latest_date_owid_dataset) %>%
filter(!is.na(continent)) %>%
select(location,new_cases, total_cases, new_deaths, total_deaths,  icu_patients, new_cases_per_million, total_cases_per_million, new_deaths_per_million, total_deaths_per_million, icu_patients_per_million, continent) %>%
reactable::reactable(filterable = TRUE,defaultSorted = "total_cases", defaultSortOrder = "desc")
# weekly
plotly::ggplotly(filter(covid_epidemiology_international, location %in% c("Italy", "Israel", "Germany", "United Kingdom", "France")) %>%
mutate(week = as.Date(cut(date, "weeks"))) %>%
group_by(location, week) %>%
summarise(new_cases_per_million = sum(new_cases_per_million)) %>%
ggplot(aes(x = week, y = new_cases_per_million, key = week))+
geom_line(aes(group = 1))+
facet_wrap(~location)+
theme(axis.text.x = element_text(angle = 90))
)
# daily
plotly::ggplotly(filter(covid_epidemiology_international, location %in% c("Italy", "Israel", "Germany", "United Kingdom", "France")) %>%
ggplot(aes(x = date, y = new_cases_per_million, key = date))+
geom_line(aes(group = 1))+
facet_wrap(~location)+
theme(axis.text.x = element_text(angle = 90))
)
filter(covid_epidemiology_international, location %in% c("Italy", "Israel", "Germany", "United Kingdom", "France")) %>%
mutate(week = as.Date(cut(date, "weeks"))) %>%
group_by(location, week) %>%
summarise(new_cases_per_million = sum(new_cases_per_million)) %>%
ggplot(aes(x = week, y = new_cases_per_million, key = week))+
geom_line(aes(group = 1))+
facet_wrap(~location)+
theme(axis.text.x = element_text(angle = 90))+ geom_smooth()
filter(covid_epidemiology_international, location %in% c("Italy", "Israel", "Germany", "United Kingdom", "France")) %>%
mutate(week = as.Date(cut(date, "weeks"))) %>%
group_by(location, week) %>%
summarise(new_cases_per_million = sum(new_cases_per_million)) %>%
ggplot(aes(x = week, y = new_cases_per_million, key = week))+
geom_line(aes(group = 1))+
facet_wrap(~location)+
theme(axis.text.x = element_text(angle = 90))+ geom_smooth(method = "glm")
filter(covid_epidemiology_international, location %in% c("Italy", "Israel", "Germany", "United Kingdom", "France")) %>%
mutate(week = as.Date(cut(date, "weeks"))) %>%
group_by(location, week) %>%
summarise(new_cases_per_million = sum(new_cases_per_million)) %>%
ggplot(aes(x = week, y = new_cases_per_million, key = week))+
geom_line(aes(group = 1))+
facet_wrap(~location)+
theme(axis.text.x = element_text(angle = 90))+ geom_smooth(method = "reml")
filter(covid_epidemiology_international, location %in% c("Italy", "Israel", "Germany", "United Kingdom", "France")) %>%
mutate(week = as.Date(cut(date, "weeks"))) %>%
group_by(location, week) %>%
summarise(new_cases_per_million = sum(new_cases_per_million)) %>%
ggplot(aes(x = week, y = new_cases_per_million, key = week))+
geom_line(aes(group = 1))+
facet_wrap(~location)+
theme(axis.text.x = element_text(angle = 90))+ geom_smooth(method = "auto")
plotly::ggplotly(filter(covid_epidemiology_international, location %in% c("Italy", "Israel", "Germany", "United Kingdom", "France")) %>%
mutate(week = as.Date(cut(date, "weeks"))) %>%
ggplot(aes(x = week, y = icu_patients_per_million, key = week))+
geom_line(aes(group = 1))+
facet_wrap(~location)
)
View(covid_data_clean)
grep("smooth", colnames(covid_data_clean), value = TRUE)
